*The code below is written in the order I wrote it initally, without any refactoring or improvements*

* Lab 1 - Exploring the protocol
** Overview
The goal of this exercise is to explore the protocol by monitoring the network traffic from client, through proxy server and to mocked TCP/UDP server. In the end we will have a series of pcaps outlining the different SOCKS5 commands. Authentication and traffic rules(i.e. the proxy server allowing/denying certain requests is out of scope.
** Tooling
1. [[https://github.com/v-byte-cpu/wirez][Wirez]] is a tool for redirecting TCP and UDP traffic to SOCKS5 proxy. It is written in Golang. It supports the `CONNECT` and `UDP ASSOCIATE` commands
2. [[https://linux.die.net/man/1/socat][Socat]] is a tool for relaying information between two bidirectional byte streams. It supports the `BIND` command
3. [[https://www.wireshark.org/][Wireshark]] is tool for capturing and analyzing network traffic.
4. [[https://www.inet.no/dante/][Dante]] is a free SOCKS5 server
5. [[https://linux.die.net/man/1/nc][netcat]] is tool for working with TCP and UDP connections.
** Concepts
*** SOCKS5 commands
In [[https://datatracker.ietf.org/doc/html/rfc1928][RFC1928]], the following commands are outlined:
+ CONNECT - This is the basic forwarding of TCP segments from the client to the server.
+ BIND - The BIND command is used in scenarios, where the server will attempt to connect back to the client. A typical usage of BIND is for P2P network protocols or [[https://stackoverflow.com/questions/25092819/when-should-an-ftp-server-connect-to-ftp-client-after-port-command][FTP]]. The ~BIND~ command is send after ~CONNECT~ command
+ UDP_ASSOCIATE - The proxy is relaying UDP datagrams to server and the responses from the server are relayed back to the client. The connection is started via TCP, but later on the proxy server must offer an UDP listener, on which datagrams with specific format are being sent.
*** SOCKS5 connection flow

In [[https://datatracker.ietf.org/doc/html/rfc1928][RFC1928]], the connection flow is outlined as follows:
1. The ~client~ sends a message containing the available authentication methods
2. The ~server~ picks authentication method, or returns ~NO ACCEPTED METHODS~
3. If the response is ~NO ACCEPTED METHODS~ the ~client~ terminates the connection
4. If the response contains a desired authentication method, the ~client~ and the ~server~ enter a method-dependent sub-negotiation
5. Once the authentication is completed, the ~client~ sends a command - either ~CONNECT~, ~BIND~ or ~UDP_ASSOCIATE~
6. The server evaluates the requests and returns a response, either indicating success or failure.
7. In case of success, the proxying starts.
[[./img/socks5_connection_flowchart.png]]
*** SOCKS5 messages formats
The messages of SOCKS5 can be roughly divided in ~requests~ and ~responses~. Every message starts with a field called ~VER~, which in SOCKS5 is always the value of 5 (or 0x05). At the end of this lab, we will have an example of each message which the protocol provides. [[https://datatracker.ietf.org/doc/html/rfc1928][RFC1928]] provides some examples.
** Experiments
*** Prerequisites
**** Network setup
*CONNECT and UDP_ASSOCIATE commands*
[[./img/lab_1_network_setup.png]]
*BIND command*
[[./img/lab_1_network_setup_bind_command.png]]

**** Compiling wirez
As [[https://github.com/v-byte-cpu/wirez][Wirez]] doesn't provide ready to use binary, we must compile it. The instructions below are for Linux. You can compile the program by following the instructions in the repository.
1. Install go 1.20
#+BEGIN_SRC bash
$ go install golang.org/dl/go1.20.9@latest
$ go1.20.9 download
#+END_SRC
2. Clone the repository
#+BEGIN_SRC bash
$ git clone https://github.com/v-byte-cpu/wirez.git
#+END_SRC
3. Compile
#+BEGIN_SRC bash
$ cd wirez
$ go build
#+END_SRC 
**** Starting Dante on local machine with Docker
Running [[https://www.inet.no/dante/][Dante]] locally with Docker is a convenient way, as the setup doesn't focus on the specifics of the proxy server. 
1. [[https://docs.docker.com/engine/install/][Install docker]]
2. Pull the following image: ~wernight/dante~
3. To start the container and bind port ~1080~ to it run ~docker run -p 1080:1080 wernight/dante~
4. If everything was successful so far, you must have the following log line:
#+BEGIN_SRC
Jan 24 19:42:40 (1737747760.895891) sockd[7]: info: Dante/server[1/1] v1.4.2 running
#+END_SRC
**** Installing other tools
The rest of the tooling (~netcat~, ~socat~, and ~Wireshark~) is widely available, consult official guidelines for your platform.
*** Exploring the CONNECT command
**** Setting up mock TCP server
The following command can be used to start a mock TCP server on port 8888:
#+BEGIN_SRC bash
$ nc -l 8888
#+END_SRC
**** Connecting to the TCP server via netcat and wirez
We can connect to the server from the previous point using the following command:
#+BEGIN_SRC
./wirez run -F PROXY_IP:PROXY_PORT -- nc SERVER_IP SERVER_PORT
# Example: ./wirez run -F 127.0.0.1:1080 -- nc 148.113.191.22 8888
#+END_SRC
**** Analyzing the traffic
1. Message send from the client on connection initialization
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 43992, Dst Port: 1080, Seq: 1, Ack: 1, Len: 3
Socks Protocol
    Version: 5
    Client Authentication Methods
        Authentication Method Count: 1
        Method[0]: 0 (No authentication) 
#+END_SRC
2. Message send from the server picking an auth method
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 43992, Dst Port: 1080, Seq: 1, Ack: 1, Len: 3
Socks Protocol
    Version: 5
    Accepted Auth Method: 0x0 (No authentication)

#+END_SRC
3. Client requesting ~connect~ command
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 43992, Dst Port: 1080, Seq: 4, Ack: 3, Len: 10
Socks Protocol
    Version: 5
    Command: Connect (1)
    Reserved: 0
    Address Type: IPv4 (1)
    Remote Address: 148.113.191.22
    Port: 8888
#+END_SRC
4. Server responding to ~CONNECT~ command
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 1080, Dst Port: 43992, Seq: 3, Ack: 14, Len: 10
Socks Protocol
    Version: 5
    Results(V5): Succeeded (0)
    Reserved: 0
    Address Type: IPv4 (1)
    Remote Address: 172.17.0.2
    Port: 43992
#+END_SRC
5. Client opening connection to server via proxy
*NOTE: The format below are not purposely encapsulated, like the UDP ones. That is we don't need to implement them as custom messages*
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 43992, Dst Port: 1080, Seq: 14, Ack: 13, Len: 1
Socks Protocol
    [Version: 5]
    [Command: Connect (1)]
    [Remote Address: 148.113.191.22]
    [Remote Port: 8888]
    TCP payload (1 byte)
Data (1 byte)

0000  0a                                                .
    Data: 0a
    [Length: 1]
#+END_SRC
6. Client sending data to server via proxy
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 43992, Dst Port: 1080, Seq: 15, Ack: 13, Len: 5
Socks Protocol
    [Version: 5]
    [Command: Connect (1)]
    [Remote Address: 148.113.191.22]
    [Remote Port: 8888]
    TCP payload (5 bytes)
Data (5 bytes)

0000  74 65 73 74 0a                                    test.
    Data: 746573740a
    [Length: 5]
#+END_SRC
7. Proxy server sending response from server to client
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 1080, Dst Port: 43992, Seq: 13, Ack: 20, Len: 5
Socks Protocol
    [Version: 5]
    [Command: Connect (1)]
    [Remote Address: 148.113.191.22]
    [Remote Port: 8888]
    TCP payload (5 bytes)
Data (5 bytes)

0000  74 65 73 74 0a                                    test.
    Data: 746573740a
    [Length: 5]
#+END_SRC
*** Exploring the BIND command
**** Setting up mock TCP Server
#+BEGIN_SRC
  $ docker run -it --entrypoint=/bin/sh subfuzion/netcat
  $ nc -l 8888
#+END_SRC
**** Connecting to the TCP server via netcat and socat - issuing CONNECT command
#+BEGIN_SRC
# Get TCP server IP
$  IP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q -f "ancestor=subfuzion/netcat")`
$  socat --experimental - SOCKS5:127.0.0.1:1080:"$IP":8888
#+END_SRC
**** Connecting from the TCP server to the client via the proxy - issuing BIND command
#+BEGIN_SRC
# Get TCP server IP
$ IP=`docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -q -f "ancestor=subfuzion/netcat")`
$ socat --experimental - SOCKS5-LISTEN:127.0.0.1:1080:"$IP":8888
#+END_SRC
**** Connecting from the mock TCP server to the client via the proxy
#+BEGIN_SRC
$ CONTAINER_ID=(docker ps -q -f "ancestor=subfuzion/netcat)
$ docker exec -it "$CONTAINER_ID" sh
$ nc PROXY_IP PROXY_PORT_FROM_BIND_RESPONSE
#+END_SRC
*note: the PROXY_PORT_FROM_BIND_RESPONSE is obtained from analyzing the response with Wireshark*
**** Analyzing the traffic
*notes:*
*1. The messages which overlap with the ~CONNECT~ command are omitted here*
*2. It appears that the data proxied from the server, to the client (i.e. data send to the binded port) is not encapsulated in protocol-specific message*

1. Bind Request
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 1080, Dst Port: 40264, Seq: 3, Ack: 14, Len: 10
Socks Protocol
    Version: 5
    Results(V5): Succeeded (0)
    Reserved: 0
    Address Type: IPv4 (1)
    Remote Address: 172.17.0.2
    Port: 59073
#+END_SRC
2. Bind response
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 1080, Dst Port: 40264, Seq: 13, Ack: 14, Len: 10
Socks Protocol
    Version: 5
    Results(V5): Succeeded (0)
    Reserved: 0
    Address Type: IPv4 (1)
    Remote Address: 172.17.0.3
    Remote Host Port: 57608
#+END_SRC
*** Exploring the UDP_ASSOCIATE command
**** Setting up mock UDP server
#+BEGIN_SRC
$ nc -lu 8888
#+END_SRC
**** Connecting to the mock UDP server via wirez and netcat
#+BEGIN_SRC
$ ./wirez run -F 127.0.0.1:1080 -- nc -u 148.113.191.22 8888
#+END_SRC

**** Analyzing the traffic
*Note: The UDP request to the server doesn't contain any socks5 specific encapsulatin
1. ~UDP_ASSOCIATE~ command request
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 39302, Dst Port: 1080, Seq: 4, Ack: 3, Len: 10
Socks Protocol
    Version: 5
    Command: UdpAssociate (3)
    Reserved: 0
    Address Type: IPv4 (1)
    Remote Address: 0.0.0.0
    Port: 0
#+END_SRC
2. ~UDP_ASSOCIATE~ command response
#+BEGIN_SRC
Transmission Control Protocol, Src Port: 1080, Dst Port: 39302, Seq: 3, Ack: 14, Len: 10
Socks Protocol
    Version: 5
    Results(V5): Succeeded (0)
    Reserved: 0
    Address Type: IPv4 (1)
    Remote Address: 172.17.0.2
    Port: 36277
#+END_SRC
3. Transfer from client to server via proxy
#+BEGIN_SRC
User Datagram Protocol, Src Port: 33010, Dst Port: 36277
Data (15 bytes)

0000  00 00 00 01 94 71 bf 16 22 b8 74 65 73 74 0a      .....q..".test.
    Data: 000000019471bf1622b8746573740a
    [Length: 15]

#+END_SRC
4. Transfering server response to client via proxy
#+BEGIN_SRC
User Datagram Protocol, Src Port: 36277, Dst Port: 33010
Data (15 bytes)

0000  00 00 00 01 94 71 bf 16 22 b8 74 65 73 74 0a      .....q..".test.
    Data: 000000019471bf1622b8746573740a
    [Length: 15]

#+END_SRC
** Conclusion
*** Observed messages
During the experiments the following messages were observed:
***** Client - Available authentication methods
#+BEGIN_SRC
+----+----------+----------+
|VER | NMETHODS | METHODS  |
+----+----------+----------+
| 1  |    1     | 1 to 255 |
+----+----------+----------+
#+END_SRC
***** Server - Picking selecting authentication method
#+BEGIN_SRC
+----+--------+
|VER | METHOD |
+----+--------+
| 1  |   1    |
+----+--------+
#+END_SRC
***** Commands - Request
#+BEGIN_SRC
+----+-----+-------+------+----------+----------+
|VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |
+----+-----+-------+------+----------+----------+
| 1  |  1  | X'00' |  1   | Variable |    2     |
+----+-----+-------+------+----------+----------+
#+END_SRC
***** Commands - Response
#+BEGIN_SRC
+----+-----+-------+------+----------+----------+
|VER | REP |  RSV  | ATYP | BND.ADDR | BND.PORT |
+----+-----+-------+------+----------+----------+
| 1  |  1  | X'00' |  1   | Variable |    2     |
+----+-----+-------+------+----------+----------+
#+END_SRC
***** Encapsulation for UDP datagram
#+BEGIN_SRC
+----+------+------+----------+----------+----------+
|RSV | FRAG | ATYP | DST.ADDR | DST.PORT |   DATA   |
+----+------+------+----------+----------+----------+
| 2  |  1   |  1   | Variable |    2     | Variable |
+----+------+------+----------+----------+----------+
#+END_SRC
* Lab 2 - Implementing messages
** Overview
The idea here it to implement the messages from lab 1. In Go.
The messages can be roughly divided into three categories - ~requests~, ~response~ and ~data encapsulation~.
Each message must be serializable/deserializable.
The goal is being able to create all the messages in the lab. To accomplish this:
1. Create a method capable of deserializing data received via network to the structure
2. Each individual structure must be serializable with ~ToBytes~ method
** Concepts
*** Encapsulation
Encapsulation is common practice, it can be observed every time a higher-level protocol uses the services of lower-level. For example TCP segments are encapsulated in packages by the IP protocol.
The socks5 proxy encapsulates the data between the client and the proxy server, but the data to the end-server is not subject to encapsulation.

In SOCKS5, encapsulation is used when the data is being transmitted between the client and the proxy. In lab 1, as well as in the RFC it can be observed that the UDP
traffic must be enclosed in specific message, where at the beginning of it, there is information about how it should be proxies, and the data its self is appended at the end.

*** Encoding
The data transmitted over a network rarely matches the data in memory, because of this a set of encoding practices are commonly uses. For example the HTTP protocol uses ~JSON~ for communication between backend and front-end.
The Postgres protocol uses a TLV(Type-Length Value) to send receive commands and transfer data. Certificates are encoded using X509. There are many other ways to encode data.
The core idea in encoding is to encode the in-memory data structure in binary in such way, so that it can be reconstructed at the other end correctly.
SOCKS5 uses fairly static structures for encoding information, most of the fields are with predefined length. The two exceptions are when the ~DST.ADDR~ field is ~FQDN~ and
the data during encapsulation.

*** Message implementation standard
***** Overview
In order for the implementation to be successful:
1. It must implement the ~Message~ interface, by implementing the ~ToBytes~ and ~Deserialize~ methods.
2. It must be tested that it returns ~error~ if the ~VER~ field is incorrect, or the auth methods are invalid(e.g. the number is not assigned by IANA)
3. It must have tests for benchmarking the ~ToBytes~ and ~Deserialize~ methods.
4. It must be fuzz-tested, interesting scenarios must be added to the fuzzing function, if any. Fuzzing for a few seconds(30) should be enough.
5. The "happy paths" must be covered by unit tests
6. Each file must contain information about the message, at the very least the message format, quoted from the results from Lab-1

In the next section, the implementation for the first message exchanged by the protocol (available authentication methods) will be implemented

***** Example - Implementing the ~Message~ interface
In the next two sections, I will cover the implementation of the ~Message~ interface, which states the each message must have two methods - ~ToBytes~ and ~Deserialize~.
The idea of those methods is to either transform from or to binary/bytes. This conversation is done without any new instances of the ~struct~. That is, the ~Deserialize~ method
is mutating the structure. The ~ToBytes~ is returning a byte array, without modifying the instance in any way.

The ~struct~ looks like this:
#+BEGIN_SRC
type AvailableAuthMethods struct {
	methods []uint16 // note that this field is privated
}

// Getter
func (m *AvailableAuthMethods) Methods() []uint16 {
	return m.methods
}
// Setter, basically checks if the message is known(i.e. defined by IANA), if so it appends it, error otherwise
func (m *AvailableAuthMethods) AddMethods(method uint16) error {
	if method > JsonParameterBlock || method == Unassigned {
		return messages.UnknownAuthMethodError{Method: method}
	}
	m.methods = append(m.methods, method)
	return nil
}

#+END_SRC
****** Example - Implementing the ~ToBytes~ function
#+BEGIN_SRC
func (m *AvailableAuthMethods) ToBytes() []byte {
	typesBytes := make([]byte, 0)
	for _, method := range m.methods {
		typesBytes = append(typesBytes, byte(method))
	}
	headersBytes := []byte{messages.PROTOCOL_VERSION, byte(len(m.methods))}
	return append(headersBytes, typesBytes...)
}
#+END_SRC
****** Example - Implementing the ~Deserialize~ function
#+BEGIN_SRC
func (m *AvailableAuthMethods) Deserialize(buf []byte) error {
	if len(buf) < 3 { // it doesn't make sense to have less than that, as a single auth method + length + protocol version will be 3 bytes
		return messages.MalformedMessageError{}
	}
	if buf[MESSAGE_VERSION_INDEX] != messages.PROTOCOL_VERSION {
		return messages.MismatchedSocksVersionError{}
	}
	authMethodsCount := uint16(buf[MESSAGE_AVAIL_METHODS_INDEX])
	lastAuthMethodIndex := int(MESSAGE_AUTH_METHODS_START_INDEX + authMethodsCount)
	if lastAuthMethodIndex >= len(buf) { // make sure we are not out reaching the array
		return messages.MalformedMessageError{}
	}
	for i := MESSAGE_AUTH_METHODS_START_INDEX; i < lastAuthMethodIndex; i++ {
		currentAuthMethod := uint16(buf[i])
		if err := m.AddMethods(currentAuthMethod); err != nil {
			return err
		}
	}
	return nil
}
#+END_SRC
***** Example - Unit testing good paths
Only single unit test is covered, together with the primary helper function.
#+BEGIN_SRC
func getCorrectBytes(methods []uint16) []byte {
	methodsByte := make([]byte, 0)
	for _, method := range methods {
		methodsByte = append(methodsByte, byte(method))
	}
	return append([]byte{0x05, byte(len(methods))}, methodsByte...)
}
func TestAvailableAuthMethods_Deserialize_Single_Method(t *testing.T) {
	validMethods := []uint16{0, 1, 2, 3, 5, 6, 7, 8, 9} // all except 4, as defined by IANA
	for _, method := range validMethods {
		singleMethod := AvailableAuthMethods{}
		err := singleMethod.Deserialize(getCorrectBytes([]uint16{method}))
		if err != nil {
			t.Fatal("Failed to deserialize correctly", method, err)
		}
	}
}
#+END_SRC
***** Example - Benchmarking
#+BEGIN_SRC
 func BenchmarkAvailableAuthMethods_Deserialize_Single_Method(b *testing.B) {
	req := []byte{0x05, 0x01, 0x01}
	for i := 0; i < b.N; i++ {
		msg := AvailableAuthMethods{}
		_ = msg.Deserialize(req)
	}
}
#+END_SRC
***** Example - Fuzzing
#+BEGIN_SRC

func FuzzAvailableAuthMethods_DeserializeDeserialized(f *testing.F) {
	f.Add([]byte{}) // this is how one adds specific confition
	f.Add([]byte{0x00, 0x05, 0x01}) // in case the size of the methods doesn't match the actual size send
	f.Fuzz(func(t *testing.T, data []byte) {
		msg := AvailableAuthMethods{}
		err := msg.Deserialize(data)
		if err != nil && !isKnownError(err) {
			t.Fatalf("Unexpected error %v with data %+v", err, data)
		}
	})
}
// quite ugly function which checks if the error is expected. Those were created by manually reasoning about what must be returned.
// For more complex functions it can be done based on experimentation(run fuzzing, check if error is ok, add to list or fix)
func isKnownError(err error) bool {
	return strings.Contains(err.Error(), "Mismatched socks version") ||
		strings.Contains(err.Error(), "Unknown auth method") ||
		strings.Contains(err.Error(), "Message is malformed")
}

#+END_SRC
** Experiments
*** Example message - Available authentication methods
* Lab 3 - Implementing SOCKS5 Client CONNECT Command
** Overview
The goal here is to implement a client using the ~messages~ developed in Lab 2, which will connect to ~Dante~ and send request to mock TCP server(via the proxy server).
Authentication will not be included
** Experiments
*** Prerequisites
**** Network setup
[[./img/lab_3_network_setup.png]]
*** Client states
#+BEGIN_SRC
const (
	PendingAuthMethods          ConnectionState = iota
	ExpectingAcceptedAuthMethod ConnectionState = iota
	PendingAuthentication       ConnectionState = iota
	Authenticated               ConnectionState = iota
	CommandRequested            ConnectionState = iota
	CommandAccepted             ConnectionState = iota
	Closed                      ConnectionState = iota
	Errored                     ConnectionState = iota
)
#+END_SRC

The states go from smaller to larger, that is you cannot go back from ~Authenticated~ back to ~PendingAuthMethods~. As a result the following getters and setters are used
in the client implementation:
#+BEGIN_SRC
func (client *Socks5Client) State() ConnectionState {
	return client.state
}

func (client *Socks5Client) setState(newState ConnectionState) error {
	if client.state > newState {
		return errors.New(fmt.Sprintf("cannot transition from %v to %v", client.state, newState))
	}
	client.state = newState
	return nil
}

func (client *Socks5Client) setError(err error) {
	client.err = err
	client.state = Errored
}
#+END_SRC
**** Sending Auth request
*** Handling authentication
#+BEGIN_SRC
func (client *Socks5Client) Connect(authMethods []uint16) error {
// Prepare message
        aam := available_auth_methods.AvailableAuthMethods{}

	if err := aam.AddMultipleMethods(authMethods); err != nil {
		client.setError(err)
		return err
	}
// Send message
	_, err := client.tcpConn.Write(aam.ToBytes())
	if err != nil {
		client.setError(err)
		return err
	}
	client.setState(ExpectingAcceptedAuthMethod)
// Read response back
	return client.handleAuth()
}

func (client *Socks5Client) handleAuth() error {
// Make sure we are in correct state
	if client.state != ExpectingAcceptedAuthMethod {
		return errors.New("client is not expecting accepted auth clients")
	}
// Read data from proxy server and deserialize to message
	buf := make([]byte, 64)
	_, err := client.tcpConn.Read(buf)
	if err != nil {
		client.setError(err)
		return err
	}
	acceptedMethod := accept_auth_method.AcceptAuthMethod{}
	if err := acceptedMethod.Deserialize(buf); err != nil {
		client.setError(err)
		return err
	}
// Confirm that the server doesn't require authentication, as that is the only thing we support so far.
	if acceptedMethod.Method() != shared.NoAuthRequired {
		return client.setState(PendingAuthentication)
	}
// Change state to authenticated (happens if all went ok until this point, otherwise the state won't be changed, ~we must have returned earlier!~)
	return client.setState(Authenticated)
}
#+END_SRC

*** Handling Connect command
#+BEGIN_SRC
func (client *Socks5Client) ConnectRequest(addr string, port uint16) (string, uint16, error) {
	if client.state != Authenticated {
		return "", 0, errors.New("client is not authenticated")
	}
	commandRequest := command_request.CommandRequest{}
	commandRequest.CMD = shared.CONNECT
	commandRequest.DST_ADDR = shared.DstAddr{Value: addr, Type: shared.ATYP_IPV4}
	commandRequest.DST_PORT = port
	req, err := commandRequest.ToBytes()

	if err != nil {
		return "", 0, err
	}
	_, err = client.tcpConn.Write(req)
	if err != nil {
		client.setError(err)
		return "", 0, err
	}
	client.setState(CommandRequested)
	addrProxy, portProxy, err := client.handleCommandResponse()
	if err != nil {
		client.setError(err)
		return "", 0, err
	}
	return addrProxy, portProxy, nil
}

func (client *Socks5Client) handleCommandResponse() (string, uint16, error) {
	if client.State() != CommandRequested {
		return "", 0, errors.New("client is has not requested command")
	}
	commandResponse, err := waitForServerCommandResponse(client.tcpConn)
	if err != nil {
		client.setError(err)
		return "", 0, err
	}
	if err := isCommandSuccessful(commandResponse); err != nil {
		client.setError(err)
		return "", 0, err
	}

	client.setState(CommandAccepted)
	return commandResponse.BND_ADDR.Value, commandResponse.BND_PORT, nil
}

func isCommandSuccessful(cmd *command_response.CommandResponse) error {
	if cmd.Status != command_response.Success {
		errMsg := fmt.Sprintf("server didn't respond with success, responed with %v", cmd.Status)
		return errors.New(errMsg)
	}
	return nil
}

func waitForServerCommandResponse(client net.Conn) (*command_response.CommandResponse, error) {
	buf := make([]byte, 64)
	_, err := client.Read(buf)
	if err != nil {
		return nil, err
	}

	commandResponse := command_response.CommandResponse{}
	err = commandResponse.Deserialize(buf)
	if err != nil {
		return nil, err
	}
	return &commandResponse, nil
}
#+END_SRC
*** Sending and receiving data
#+BEGIN_SRC
func (client *Socks5Client) GetReaderWriter() (io.ReadWriter, error) {
	if client.state != CommandAccepted {
		return nil, errors.New("the server has not accepted any command")
	}
	return client.tcpConn, nil
}

// ... Setup connection, send command request etc...
        rw, err := client.GetReaderWriter()
	if err != nil {
		t.Fatalf("%v", err)
	}
	testString := "Hello"
	_, err = rw.Write([]byte(testString))
	if err != nil {
		t.Fatalf("Failed writing to mock server, reason: %v", err)
	}

	buf := make([]byte, 1024)
	n, err := rw.Read(buf)
// ... close the connection?

func (client *Socks5Client) Close() error {
	client.setState(Closed)
	return client.tcpConn.Close()
}
#+END_SRC
* Lab 4 - Implemting SOCKS5 Client BIND Command
** Overview
In this lab the client will be extended to support the BIND command
** Concepts
*** Connection setup and traffic flow
:[[./img/lab_4_flow.png]]
The connect command requires the server to establish connection back to the client.
The flow is as follows:
1. The client opens sends a CONNECT command to the proxy server.
1.1. The proxy server establishes TCP connection to the server and returns SUCCESS to the client
2. In a separated TCP connection the client sends a BIND command to the server
2.1 The proxy server starts a listener and returns the info to the client
3. The client sends the information about the listener from point 2.2 to the server
4. The server establishes connection to the proxy server
4.1 The proxy server notifies the client that a connection to the listener was established
4.2 The proxy server transfers the data(send by the server) to the client
** Experiments
*** Handling Bind command
#+BEGIN_SRC
func (client *Socks5Client) BindRequest(addr string, port uint16) (string, uint16, error) {
	if client.state != Authenticated {
		return "", 0, errors.New("client is not authenticated")
	}
	commandRequest := command_request.CommandRequest{}
	commandRequest.CMD = shared.BIND
	commandRequest.DST_ADDR = shared.DstAddr{Value: addr, Type: shared.ATYP_IPV4}
	commandRequest.DST_PORT = port
	req, err := commandRequest.ToBytes()

	if err != nil {
		return "", 0, err
	}
	_, err = client.tcpConn.Write(req)
	if err != nil {
		client.setError(err)
		return "", 0, err
	}

	client.setState(CommandRequested)
	addrProxy, portProxy, err := client.handleCommandResponse()
	if err != nil {
		client.setError(err)
		return "", 0, err
	}
	client.setState(CommandAccepted)
	return addrProxy, portProxy, err
}


// NOTE: Those are the same as the ones for connect command. Added for completeness
func (client *Socks5Client) handleCommandResponse() (string, uint16, error) {
	if client.State() != CommandRequested {
		return "", 0, errors.New("client is has not requested command")
	}
	commandResponse, err := waitForServerCommandResponse(client.tcpConn)
	if err != nil {
		client.setError(err)
		return "", 0, err
	}
	if err := isCommandSuccessful(commandResponse); err != nil {
		client.setError(err)
		return "", 0, err
	}

	client.setState(CommandAccepted)
	return commandResponse.BND_ADDR.Value, commandResponse.BND_PORT, nil
}

func isCommandSuccessful(cmd *command_response.CommandResponse) error {
	if cmd.Status != command_response.Success {
		errMsg := fmt.Sprintf("server didn't respond with success, responed with %v", cmd.Status)
		return errors.New(errMsg)
	}
	return nil
}
#+END_SRC
*** Mock TCP server
#+BEGIN_SRC
// USAGE
	// Send proxy address to server
	rwConn, err := connectClient.GetReaderWriter()
	rwConn.Write([]byte(addrProxy + ":" + strconv.Itoa(int(portProxy))))
	buf := make([]byte, 1024)
	n, err := rwConn.Read(buf)
	if string(buf[:n]) != serverRequestResponse {
		t.Fatalf("Expected server to response with %v", serverRequestResponse)
	}
// ...
        rwBind, err := bindClient.GetReaderWriter()
  	n, err = rwBind.Read(buf2)
	if string(buf2[:n]) != serverResponse {
		t.Fatalf("Expected server to send with TEST, got %v", string(buf2[:n]))
	}
// SERVER


func startServer() net.Addr {
	srv, err := net.Listen("tcp4", "127.0.0.1:4440")
	if err != nil {
		panic(err)
	}

	go func() {
		client, err := srv.Accept()
		if err != nil {
			panic(err)
		}
		buf := make([]byte, 1024)
		n, err := client.Read(buf)
		if err != nil {
			panic(err)
		}
		conn, err := connectBackToClient(string(buf[:n]))
		if err != nil {
			panic(err)
		}
		client.Write([]byte(serverRequestResponse)) // Send to the client-initated connection
		conn.Write([]byte(serverResponse))  // Send to the server-initiated connection 
		conn.Close()
		client.Close()
	}()
	return srv.Addr()
}

func connectBackToClient(addr string) (*net.TCPConn, error) {
	tcpAddr, err := net.ResolveTCPAddr("tcp", addr)
	if err != nil {
		return nil, err
	}
	conn, err := net.DialTCP("tcp", nil, tcpAddr)
	if err != nil {
		return nil, err
	}
	serverConnectedWithPort = uint16(conn.LocalAddr().(*net.TCPAddr).Port)
	return conn, nil
}

#+END_SRC

* Lab 5 - Implemting SOCKS5 UDP ASSOCIATE Command
* Lab 6 - Implementing SOCKS5 Server CONNECT Command
* Lab 7 - Implementing SOCKS5 Server BIND Command
* Lab 8 - Implementing SOCKS5 Server UDP ASSOCIATE Command
* Lab 9 - Refactoring SOCKS5 to support username/password authentication method
